---------------------------------------------------------------------------------------------------------------------------------------------------------------
【模块01】Javaee01-Servlet
    helloServlet（servlet的入门例子）
        LifeCycleServlet //继承GenericServlet类，重写init、destroy、service方法
        FirstServlet //继承自HttpServlet类，重写doGet、doPost方法。web.xml中配置url。HttpServletResponse.getWriter().println()方法的使用。
        SecondServlet //通过注解的方式（@WebServlet）的方式声明一个Servlet。web.xml和@WebServlet两种方式选择其一即可。
    urlDetail（url-pattern的细节）
        Servlet1 //指定以/开头的url-pattern
        Servlet2 //@WebServlet(url-pattern = {})可以显式指定多个url-pattern对应一个servlet
        Servlet3 //指定以.*为后缀的url-pattern //比如访问1.html
    urlPriority（url-pattern的优先级）
        // /开头的和*.后缀同时匹配到，总是会执行/开头的，因为/开头的优先级高于*
        //都是以/开头的之间比较，匹配程度越高，执行谁
    servletConfig（ServletConfig）
        //在当前servlet被加载的时候，tomcat会自动地将servlet节点下的init-param节点，里面的数据封装到config对象中。
            //init方法的ServletConfig对象。ServletConfig.getInitParameter()方法。
    servletContext（ServletContext）
        //ServletContext作为一个全局性共享数据的地方
        ContextServlet1 //通过getServletContext()获取ServletContext对象，再通过ServletContext.setAttribute()设置key-value。
        ContextServlet2 //通过getServletContext()获取ServletContext对象，再通过ServletContext.getAttribute()获取key对应的value。
        ContextServlet3和ContextServlet4是使用ServletContext统计网站访问次数的一个简单例子
        AbsolutePathServlet //通过getServletContext().getRealPath()可以获取指定文件名的文件在最终部署目录中的绝对路径
        GlobalInitServlet //web.xml的<context-param>节点中可以设置全局性的初始化参数，然后可以通过getServletContext().getInitParameter()获取指定key的value值。
---------------------------------------------------------------------------------------------------------------------------------------------------------------
【模块02】Javaee02-Request
    【解析请求报文的各个部分】ParseRequestServlet
        //HttpServletRequest的一些方法的使用：getMethod()、getRequestURI()、getRequestURL()、getProtocol()、getHeader()等等。
    【获取请求参数】login.xml、LoginServlet
        //HttpServletRequest的getParameter()获取提交表单中对应项的内容。
    【精简获取请求参数的方式】register.html、RegisterServlet
        //html表单中如果有很多项数据，需要调用很多次req.getParameter()方法。
        //可以只调用一次req.getParameterNames()获取所有数据，迭代并解析。
        //相关方法：parameterNames.hasMoreElements()、parameterNames.nextElement()
        //另外注意req.getParameter(key)和req.getParameterValues(key)的区别。比如getParameter()只能获取checkbox中的一个数据，而getParameterValues()可以获取checkbox中的所有数据。
    【封装获取到的请求参数】register.html、RegisterServlet2
        //req.getParameterMap()获取所有的请求参数，通过BeanUtils.populate()将所有请求参数封装到User对象中。
    【转发的一个案例】login.xml、LoginDispatcherServlet、info.html
        //模拟用户登录，校验用户名和密码，校验成功后跳转到个人主页
        //HttpServletRequest的setCharacterEncoding()方法设置字符集
        //HttpServletRequest的getParameter()获取提交表单中对应项的内容。
        //HttpServletRequest的req.getRequestDispatcher()方法获取RequestDispatcher对象，RequestDispatcher的forward()方法执行转发操作。
        //转发包含的路径中不能带应用名，否则会报错。如果是浏览器，那么则必须要带应用； 如果是服务器，则不要带应用名。
    【转发和包含的区别】DispatcherServlet1、DispatcherServlet2
        req.getRequestDispatcher()获取指定的要跳转到的其他servlet，resp.setContentType()设置内容类型，
        区分dispatcher2.forward()和dispatcher2.include()
        转发留头不留体，包含留头也留体。
    【request域和context域】RequestDomainServlet1、RequestDomainServlet2
        同一个应用的所有组件可以共享context域。    getServletContext().setAttribute()
        同一个应用中只有转发包含关系的组件之间可以共享request域。   req.setAttribute()
---------------------------------------------------------------------------------------------------------------------------------------------------------------
【模块03】Javaee03-Response
    【Response】ResponseServlet1、ResponseServlet2
        resp.setStatus()设置状态码
        resp.setCharacterEncoding("utf-8");设置响应体的编码格式，但是浏览器仍然中文乱码。
        resp.setHeader("content-type","text/html;charset=utf-8");设置响应体的编码格式，同时告知浏览器服务端的编码格式。//此时浏览器没有中文乱码。
        resp.setContentType("text/html;charset=utf-8");效果同上面的方法。
        resp.setCharacterEncoding("utf-8");设置响应体的编码格式后，将html的内容作为字符串用resp.getWriter().println()输出，浏览器展示html页面，且没有乱码。
    【发送二进制数据到浏览器】ImageServlet、1.jpg、WEB-INF/2.jpg
        获取1.jpg或WEB-INF/2.jpg在最终部署目录中的绝对路径。  getServletContext().getRealPath()
        path -> File -> FileInputStream、输出流使用resp.getOutputStream()
        将二进制数据从输入流读入输出流，浏览器显示图片。
    【各种路径】PathServlet
        requestURL、requestURI、contextPath、servletPath，都可以通过调用HttpServletRequest对应的get方法获得。
        requestURI = contextPath + servletPath
    【定时刷新 & 一个登录案例】RefreshServlet、login.html、LoginServlet、byer.html
        response.setHeader("refresh","2")可以指定每2秒刷新一次当前页面。
        resp.setHeader("refresh","2,url=login.html")可以指定经过2秒后，跳转到指定的页面。//注意url可以有多种表达方式。
        案例：通过/response/refresh或/response/login.html（间接或直接）访问登录页面，login.html的form表单的action将url指向/response/login，
             LoginServlet的逻辑是从req中获取用户名和密码信息并校对。校对成功，则3秒后访问北邮人页面。校对失败，则提示输入用户名或密码错误，3秒后跳转到/response/login.html重新登录。
    【重定向】RedirectServlet
        方式一：resp.setStatus(302) + resp.setHeader("Location","http://www.baidu.com")
        方式二：resp.sendRedirect("http://www.baidu.com")
    【下载】


---------------------------------------------------------------------------------------------------------------------------------------------------------------
【模块04】Javaee04-Fileupload
    【上传图片遇到问题】upload1.html、UploadServlet1、upload2.html、UploadServlet2
        form表单的属性中没有添加：enctype="multipart/form-data"  //上传图片，只会上传文件名。
        form表单的属性中添加：enctype="multipart/form-data"  //可以上传二进制数据。  //但是添加了又无法获取请求参数。
        出现以上问题的原因：数据结构由原来的key1=value1&key2=value2形式转换成了-----WebkitFormBoundary的形式。
            以前可以利用&来分割，分割的各个部分进一步切割key value放入map。随着数据结构发生更改，获取不到。
        解决：手动分割（麻烦且困难）、直接使用三方工具类来完成文件上传及form表单数据获取。
        Postman和Fiddler的使用。
    【文件上传组件的使用】upload3.html、UploadServlet3
        commons-fileupload的使用。将form表单的处理分为对普通表单数据的处理和对上传文件的处理。
        //使用IE浏览器出现空指针异常，换Chrome浏览器，因为IE浏览器item.getName()获取的是路径而非文件名。//【中文乱码还是没解决】
        //处理逻辑不需要记，会用即可（看commons-fileupload的使用文档）。
    【使用组件将数据封装到bean中】User、upload4.html、UploadServlet4、upload5.html、UploadServlet5、upload6.html、UploadServlet6、FileUploadUtils
        //创建一个User类作为bean，将表单数据和上传文件（的相对路径）封装到一个User对象中。
        //UploadServlet4是中规中矩的方式，条件判断。
        //UploadServlet5，使用一个hashmap结构保存中间结果，最后使用BeanUtils.populate()将hashmap封装到user中。
        //UploadServlet6，将UploadServlet5中文件上传中获取hashmap的部分封装到文件上传工具类FileUploadUtils里面，最后可以使用BeanUtils.populate()将hashmap封装到任意的bean中。
    【所有文件都在同一目录下，文件数过多的问题】
        修改FileUploadUtils工具类。利用文件名的哈希值，建立多级目录。
    【封装到bean后，连上数据库】DruidUtils、upload7.html、UploadServlet7
        //数据库的包 mysql-connector-java druid dbutils  //对应JDBC、数据库连接池、dbutils
        //注意QueryRunner传datasource和不传datasource的区别。
        //runner.update()
    【展示用户信息】info.html、InfoServlet
        //ResultHandler的两种：BeanListHandler（将取出的结果封装成listbean的形式）、BeanHandler（将取出的结果封装成一个bean对象）
        //runner.query()
        【问题还未解决】卡死在这里：com.alibaba.druid.support.logging.JakartaCommonsLoggingImpl.info {dataSource-1} inited
    【相同目录中有同名文件怎么办】FileUploadUtils
        filename = UUID.randomUUID() + "-" + filename;//UUID.randomUUID()随机生成一个字符串
---------------------------------------------------------------------------------------------------------------------------------------------------------------
【模块05】Javaee05-Cookie
【模块06】Javaee06-Session
【模块07】Javaee07-Cart//购物车
---------------------------------------------------------------------------------------------------------------------------------------------------------------
【模块08】Javaee08-JSP
【模块09】Javaee09-Filter
【模块10】Javaee10-Listener
Call?、json、login、history、MVC








