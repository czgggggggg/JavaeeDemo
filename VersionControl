---------------------------------------------------------------------------------------------------------------------------------------------------------------
【模块01】Javaee01-Servlet
    helloServlet（servlet的入门例子）
        LifeCycleServlet //继承GenericServlet类，重写init、destroy、service方法
        FirstServlet //继承自HttpServlet类，重写doGet、doPost方法。web.xml中配置url。HttpServletResponse.getWriter().println()方法的使用。
        SecondServlet //通过注解的方式（@WebServlet）的方式声明一个Servlet。web.xml和@WebServlet两种方式选择其一即可。
    urlDetail（url-pattern的细节）
        Servlet1 //指定以/开头的url-pattern
        Servlet2 //@WebServlet(url-pattern = {})可以显式指定多个url-pattern对应一个servlet
        Servlet3 //指定以.*为后缀的url-pattern //比如访问1.html
    urlPriority（url-pattern的优先级）
        // /开头的和*.后缀同时匹配到，总是会执行/开头的，因为/开头的优先级高于*
        //都是以/开头的之间比较，匹配程度越高，执行谁
    servletConfig（ServletConfig）
        //在当前servlet被加载的时候，tomcat会自动地将servlet节点下的init-param节点，里面的数据封装到config对象中。
            //init方法的ServletConfig对象。ServletConfig.getInitParameter()方法。
    servletContext（ServletContext）
        //ServletContext作为一个全局性共享数据的地方
        ContextServlet1 //通过getServletContext()获取ServletContext对象，再通过ServletContext.setAttribute()设置key-value。
        ContextServlet2 //通过getServletContext()获取ServletContext对象，再通过ServletContext.getAttribute()获取key对应的value。
        ContextServlet3和ContextServlet4是使用ServletContext统计网站访问次数的一个简单例子
        AbsolutePathServlet //通过getServletContext().getRealPath()可以获取指定文件名的文件在最终部署目录中的绝对路径
        GlobalInitServlet //web.xml的<context-param>节点中可以设置全局性的初始化参数，然后可以通过getServletContext().getInitParameter()获取指定key的value值。
---------------------------------------------------------------------------------------------------------------------------------------------------------------
【模块02】Javaee02-Request
    【解析请求报文的各个部分】ParseRequestServlet
        //HttpServletRequest的一些方法的使用：getMethod()、getRequestURI()、getRequestURL()、getProtocol()、getHeader()等等。
    【获取请求参数】login.xml、LoginServlet
        //HttpServletRequest的getParameter()获取提交表单中对应项的内容。
    【精简获取请求参数的方式】register.html、RegisterServlet
        //html表单中如果有很多项数据，需要调用很多次req.getParameter()方法。
        //可以只调用一次req.getParameterNames()获取所有数据，迭代并解析。
        //相关方法：parameterNames.hasMoreElements()、parameterNames.nextElement()
        //另外注意req.getParameter(key)和req.getParameterValues(key)的区别。比如getParameter()只能获取checkbox中的一个数据，而getParameterValues()可以获取checkbox中的所有数据。
    【封装获取到的请求参数】register.html、RegisterServlet2
        //req.getParameterMap()获取所有的请求参数，通过BeanUtils.populate()将所有请求参数封装到User对象中。
    【转发的一个案例】login.xml、LoginDispatcherServlet、info.html
        //模拟用户登录，校验用户名和密码，校验成功后跳转到个人主页
        //HttpServletRequest的setCharacterEncoding()方法设置字符集
        //HttpServletRequest的getParameter()获取提交表单中对应项的内容。
        //HttpServletRequest的req.getRequestDispatcher()方法获取RequestDispatcher对象，RequestDispatcher的forward()方法执行转发操作。
        //转发包含的路径中不能带应用名，否则会报错。如果是浏览器，那么则必须要带应用； 如果是服务器，则不要带应用名。
    【转发和包含的区别】DispatcherServlet1、DispatcherServlet2
        req.getRequestDispatcher()获取指定的要跳转到的其他servlet，resp.setContentType()设置内容类型，
        区分dispatcher2.forward()和dispatcher2.include()
        转发留头不留体，包含留头也留体。
    【request域和context域】RequestDomainServlet1、RequestDomainServlet2
        同一个应用的所有组件可以共享context域。    getServletContext().setAttribute()
        同一个应用中只有转发包含关系的组件之间可以共享request域。   req.setAttribute()
---------------------------------------------------------------------------------------------------------------------------------------------------------------
【模块03】Javaee03-Response
    【Response】ResponseServlet1、ResponseServlet2
        resp.setStatus()设置状态码
        resp.setCharacterEncoding("utf-8");设置响应体的编码格式，但是浏览器仍然中文乱码。
        resp.setHeader("content-type","text/html;charset=utf-8");设置响应体的编码格式，同时告知浏览器服务端的编码格式。//此时浏览器没有中文乱码。
        resp.setContentType("text/html;charset=utf-8");效果同上面的方法。
        resp.setCharacterEncoding("utf-8");设置响应体的编码格式后，将html的内容作为字符串用resp.getWriter().println()输出，浏览器展示html页面，且没有乱码。
    【发送二进制数据到浏览器】ImageServlet、1.jpg、WEB-INF/2.jpg
        获取1.jpg或WEB-INF/2.jpg在最终部署目录中的绝对路径。  getServletContext().getRealPath()
        path -> File -> FileInputStream、输出流使用resp.getOutputStream()
        将二进制数据从输入流读入输出流，浏览器显示图片。
    【各种路径】PathServlet
        requestURL、requestURI、contextPath、servletPath，都可以通过调用HttpServletRequest对应的get方法获得。
        requestURI = contextPath + servletPath
    【定时刷新 & 一个登录案例】RefreshServlet、login.html、LoginServlet、byer.html
        response.setHeader("refresh","2")可以指定每2秒刷新一次当前页面。
        resp.setHeader("refresh","2,url=login.html")可以指定经过2秒后，跳转到指定的页面。//注意url可以有多种表达方式。
        案例：通过/response/refresh或/response/login.html（间接或直接）访问登录页面，login.html的form表单的action将url指向/response/login，
             LoginServlet的逻辑是从req中获取用户名和密码信息并校对。校对成功，则3秒后访问北邮人页面。校对失败，则提示输入用户名或密码错误，3秒后跳转到/response/login.html重新登录。
    【重定向】RedirectServlet
        方式一：resp.setStatus(302) + resp.setHeader("Location","http://www.baidu.com")
        方式二：resp.sendRedirect("http://www.baidu.com")
    【下载】download.html、ViewServlet、DownloadServlet、FileServlet
        response也可以用来下载文件。
        浏览器对待文件的处理方式：1.对于可以打开的文件，默认情况下执行打开显示内容操作。比如图片、html等；
                              2.对于无法正常打开的文件，默认情况下执行下载操作，比如zip文件、exe文件。
        对于浏览器可以打开的文件，如果不想让其打开，可以设置一个响应头，这样文件就会被下载下来。
        [1]直接显示图片；
        [2]利用servlet来显示一个图片； //直接利用【发送二进制数据到浏览器】中的代码
        [3]利用servlet来下载一个图片;  //直接利用【发送二进制数据到浏览器】中的代码，另外添加一个响应头resp.setHeader("Content-Disposition","attachment;filename=1.jpg");
        [4]将viewServlet和DownloadServlet做一个精简优化。//FileServlet//增加一个请求参数op
---------------------------------------------------------------------------------------------------------------------------------------------------------------
【模块04】Javaee04-Fileupload
    【上传图片遇到问题】upload1.html、UploadServlet1、upload2.html、UploadServlet2
        form表单的属性中没有添加：enctype="multipart/form-data"  //上传图片，只会上传文件名。
        form表单的属性中添加：enctype="multipart/form-data"  //可以上传二进制数据。  //但是添加了又无法获取请求参数。
        出现以上问题的原因：数据结构由原来的key1=value1&key2=value2形式转换成了-----WebkitFormBoundary的形式。
            以前可以利用&来分割，分割的各个部分进一步切割key value放入map。随着数据结构发生更改，获取不到。
        解决：手动分割（麻烦且困难）、直接使用三方工具类来完成文件上传及form表单数据获取。
        Postman和Fiddler的使用。
    【文件上传组件的使用】upload3.html、UploadServlet3
        commons-fileupload的使用。将form表单的处理分为对普通表单数据的处理和对上传文件的处理。
        //使用IE浏览器出现空指针异常，换Chrome浏览器，因为IE浏览器item.getName()获取的是路径而非文件名。//【中文乱码还是没解决】
        //处理逻辑不需要记，会用即可（看commons-fileupload的使用文档）。
    【使用组件将数据封装到bean中】User、upload4.html、UploadServlet4、upload5.html、UploadServlet5、upload6.html、UploadServlet6、FileUploadUtils
        //创建一个User类作为bean，将表单数据和上传文件（的相对路径）封装到一个User对象中。
        //UploadServlet4是中规中矩的方式，条件判断。
        //UploadServlet5，使用一个hashmap结构保存中间结果，最后使用BeanUtils.populate()将hashmap封装到user中。
        //UploadServlet6，将UploadServlet5中文件上传中获取hashmap的部分封装到文件上传工具类FileUploadUtils里面，最后可以使用BeanUtils.populate()将hashmap封装到任意的bean中。
    【所有文件都在同一目录下，文件数过多的问题】
        修改FileUploadUtils工具类。利用文件名的哈希值，建立多级目录。
    【封装到bean后，连上数据库】DruidUtils、upload7.html、UploadServlet7
        //数据库的包 mysql-connector-java druid dbutils  //对应JDBC、数据库连接池、dbutils
        //注意QueryRunner传datasource和不传datasource的区别。
        //runner.update()
    【展示用户信息】info.html、InfoServlet
        //ResultHandler的两种：BeanListHandler（将取出的结果封装成listbean的形式）、BeanHandler（将取出的结果封装成一个bean对象）
        //runner.query()
        【问题还未解决】卡死在这里：com.alibaba.druid.support.logging.JakartaCommonsLoggingImpl.info {dataSource-1} inited
    【相同目录中有同名文件怎么办】FileUploadUtils
        filename = UUID.randomUUID() + "-" + filename;//UUID.randomUUID()随机生成一个字符串
---------------------------------------------------------------------------------------------------------------------------------------------------------------
【模块05】Javaee05-Cookie
    【Cookie】CookieServlet
        1.新建一个Cookie对象，写入name和value；
        2.response调用addCookie()，将cookie信息以Set-Cookie响应头的形式发送回客户端。
          //cookie的value中不能有空格。
    【案例一：以上次的登录时间作为cookie】LastLoginServlet
        request.getCookies()、cookie.getName()、cookie.getValue()
        把系统的当前时间+""作为value的cookie，传入response.addCookie()中返回。
    【案例二：从登录页面跳转到用户页面，将登录页面的用户名参数通过Cookie传输，在用户页面取出并显示】LoginServlet、InfoServlet
        //resp.setContentType("text/html;charset=utf-8");
        //req.getParameter、resp.addCookie()、resp.setHeader、req.getContextPath()、cookie.getName()、cookie.getValue()
    【设置path】PathServlet1、PathServlet2
        默认情况下，浏览器请求当前主机下的所有资源都会携带cookie。
        可以在新建一个Cookie对象的时候，调用cookie的setPath()方法，让浏览器在访问指定的资源路径的时候才携带这个cookie。
        //req.getContextPath()
    【设置存活时间】MaxAgeServlet1
        默认情况下，如果没有设置，那么该cookie的存活时间仅仅是在浏览器开启的这段时间内有效，此时cookie是保存在浏览器的内存中。//【我这里测试了一下，默认情况下好像cookie一直不会失效。】
        如果要想让其进行持久化存储，这需要设置一个MaxAge，值表示秒数。
    【删除cookie】MaxAgeServlet2
        通过设置MaxAge为0，删除指定的cookie。//并没有提供一个deleteCookie的API。
        //记得设置为MaxAge为0的cookie要通过resp.addCookie()重新返回，否则无效，因为浏览器并不知道cookie的MaxAge被设置成了0，如果浏览器再发起一个请求，携带的这个cookie的MaxAge还是原来的值。
        //而且如果cookie原先设置了path，还要重新设置一遍，否则无效。
        //也就是说，删除cookie时，必须要设置和生成cookie时相同的path，否则无法删除cookie
        //如果没有设置path，那么删除不需要设置path；但是只要你设置了path，那么删除就一定要和生成时保持相同的path，否则无法删除。
    【设置domain】
        当前的域名是localhost。通过cookie.setDomain()，可以指定域名名称，并且该域名的子域名都可以访问这个cookie。
        例如：cookie.setDomain("czgbyer.com")，则czgbyer.com:8080、video.czgbyer.com:8080、story.video.czgbyer.com:8080等等都可以访问这个cookie。
        另外，出于安全性考虑浏览器不允许cookie跨域。比如，localhost:8080携带的cookie不允许localhost:80访问。
        【未解决】访问http://czgbyer.com:8080/cookie/domain失败。     //[Fiddler] DNS Lookup for "czgbyer.com" failed. System.Net.Sockets.SocketException 不知道这样的主机。
---------------------------------------------------------------------------------------------------------------------------------------------------------------
【模块06】Javaee06-Session
    【Cookie和Session】SessionServlet
        request.getSession()可以生成一个session对象。
        第一次请求时，响应报文有一个Set-Cookie响应头，里面包含生成的session信息JSESSIONID，第二次请求时，响应报文不再有Set-Cookie响应头，而请求报文中多了一个Cookie响应头，里面包含的是第一次请求时生成的session信息JSESSIONID。
        【疑问】需要将web根目录下的index.jsp删除是为什么？
    【Session存取数据】login.html、LoginServlet、InfoServlet
        session可以存放信息，再次请求的时候可以从session中取出需要的信息。
        session.setAttribute()、session.getAttribute()
    【关闭浏览器后重新开启，session对象是否被销毁？】
        答：原先的session对象并没有被销毁。只是变得不可达。
    【重启服务器，session对象是否被销毁？】LifeServlet1、LifeServlet2
        答：原先的session对象并被销毁，会重新创建新的对象。但里面的数据还在。
        1.先访问life1，后访问life2。发现session是同一个，SESSIONID不变，session中保存的值还在。
        2.重启tomcat，再次访问life2。发现session不是同一个，但是，SESSIONID不变，session中保存的值还在。
        说明：原先的session对象并被销毁，会重新创建新的对象。但里面的数据还在。
        原因：应用被关闭的时候，session里面的数据以及session的id会全部序列化到本地硬盘中，在磁盘中生成sessions.ser文件。
        注意点1：不能通过重启IDEA的tomcat来验证。因为IDEA的tomcat在每次启动前的时候都会去复制本地的tomcat的配置文件，把原先的文件全部删除，用新的文件来替代（所以SESSION.ser就消失了）
                通过Tomcat管理页面来停止、启动tomcat。  http://localhost:8080/manager
        注意点2：tomcat管理页面403 Access Denied的解决方法。
                修改/webapps/manager/META-INF/目录下的context.xml文件。
                参考链接：https://www.jianshu.com/p/73758fea175e
       【疑问】没找到sessions.ser文件。
    【区别getSession()和getSession(boolean var1)】
    【session生命周期】
        session.invalidate();
    【context、session、request】
        context上下文（作用于整个应用和生命周期） > session会话（作用于当前会话） > request请求（作用于当次请求）
---------------------------------------------------------------------------------------------------------------------------------------------------------------
【模块07】Javaee07-Cart//购物车
---------------------------------------------------------------------------------------------------------------------------------------------------------------
【模块08】Javaee08-JSP
    【JSP原理】
        http://localhost:8080  没写应用名也没写资源名，默认访问的是ROOT应用的index页面。  http://localhost:8080=http://localhost:8080(/ROOT)/index.jsp
        url-pattern优先级：/* > *.jsp > /
        当访问index.jsp的时候，其实是tomcat中一个叫做jsp的servlet在处理请求。  //匹配*.jsp和*.jspx
        当访问html、png、jpg，这个时候如果没有配置相应的servlet，tomcat就调用缺省servlet来处理请求（请求不能没有组件来相应）。
        [总结（还没理解透彻）][1]访问.../index.jsp；[2]请求会交给jsp引擎，它会到指定应用的指定目录中寻找该jsp文件；[3]按照一定的规则将jsp文件翻译为java文件（本质上来说也是一个servlet）；
                           [4]java文件编译成class文件；[5]执行该class文件的service方法；[6]里面有一个对象可以往response中塞入html的各种标签；
                           [7]connector读取response中的数据，形成一个响应报文（html的标签此时就在响应体中）；[8]浏览器拿到响应报文，解析，渲染页面。
    【JSP语法】1.jsp
        [1]骨架：html标签。 //这些标签jsp会原封不动地直接将其响应给客户端。       <html> -> out.write("html\n");
        [2]表达式：<%=%>  //jsp表达式内部的代码会直接响应到客户端。       <%=new Date()%> -> out.print(new Date())
                         //<%=变量 %> 是 <% out.println(变量) %> 的简写方式。
        [3]脚本片段：<%%>  //jsp脚本片段里面的代码会原封不动地翻译到java文件地service方法中。      <%System.out.println("hello,jsp");%> -> System.out.println("hello,jsp");
                         //jsp脚本片段里面地代码会不会影响到客户端？不一定。Response.getWriter().println()
                         //jsp脚本片段可以写多个，每个片段可以不符合java语法，但是最终翻译以后，要符合java语法。
        [4]声明：<%!%>    //<%!%>里面的代码会被翻译到_jspService方法的外部。_jspService方法内部定义了几个对象，所以此时声明中无法使用这些对象。
                         //jsp中可以写java代码，但是是有前提条件的：jsp表达式、jsp脚本片段、jsp声明里面可以写java代码，除此之外都是普通的文本。
        [5]注释：<%----%> //jsp注释和html注释都是写在空白区域的。java注释必须要写在jsp脚本片段和jsp声明中。
    【JSP指令】2.jsp、3.jsp
        JSP指令用来设置与整个JSP页面相关的属性。 语法格式：<%@ directive attribute="value" %>
        这里有三种指令标签：1.<%@ page ... %>  //定义页面的依赖属性，比如脚本语言、error页面、缓存需求等等
                         2.<%@ include ... %>  //包含其他文件
                         3.<%@ taglib ... %>  //引入标签库的定义，可以是自定义标签
    【JSP九大对象】domain.jsp
        指，在_jspService方法内部，存在9个对象。在jsp页面中，通过jsp表达式、jsp脚本片段，可以直接使用。
            request（HttpServletRequest）、Response（HttpServletResponse）、pageContext（PageContext）、
            Session（HttpSession）、Application（ServletContext）、Config（ServletConfig）、
            Page（this）、Out（JspWriter）、Exception（Throwable）
        [1]pageContext域
            域范围大小：当前页面有效。  pageContext.setAttribute(key,value)
                <%pageContext.setAttribute("key","page")%>  <%pageContext.getAttribute("key")%>
            可以给其他域赋值。  pageContext.setAttribute(key,value,scope)
                If(scope == PageContext.REQUEST_SCOPE)
                    pageContext.getRequest().setAttribute(key,value)
                If(scope == PageContext.SESSION_SCOPE)
                    pageContext.getSession().setAttribute(key,value)
                ...
            pageContext.findAttribute(key)
                findAttribute 在查找数据的时候，从小到大依次进行查找，找到则结束，找不到则继续到下一个域。
                Page < request < session < context
            pageContext是jsp中最核心的一个对象，通过pageContext可以得到其他8个对象。
---------------------------------------------------------------------------------------------------------------------------------------------------------------
【模块09】Javaee09-Filter
---------------------------------------------------------------------------------------------------------------------------------------------------------------
【模块10】Javaee10-Listener
---------------------------------------------------------------------------------------------------------------------------------------------------------------
Call?、json、login、history、MVC








